using Application.Dtos;
using Domain.Entities;
using Application.Interfaces.Services;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;

namespace Api.Controllers
{
    [ApiController]
    [Route("{{entityName}}")]
    public class {{EntityName}}Controller : ControllerBase
    {
        private readonly I{{EntityName}}Service _{{entityName}}Service;

        public {{EntityName}}Controller(I{{EntityName}}Service {{entityName}}Service)
        {
            _{{entityName}}Service = {{entityName}}Service;
        }

        [HttpPost("create")]
        public async Task<ActionResult<BaseResponse<int>>> Create([FromBody] {{EntityName}}Request createRequest)
        {
            var result = await _{{entityName}}Service.Create(createRequest);

            if (result.Success)
            {
                return Ok(result);
            }
            else if (result.Errors.Count > 0)
            {
                return BadRequest(result);
            }

            return StatusCode(StatusCodes.Status500InternalServerError);
        }

        [HttpGet("get-all")]
        public async Task<ActionResult<BaseResponse<IEnumerable<{{EntityName}}>>>> GetAll()
        {
            var result = await _{{entityName}}Service.GetAll();

            if (result.Success)
            {
                return Ok(result);
            }
            else if (result.Errors.Count > 0)
            {
                return BadRequest(result);
            }

            return StatusCode(StatusCodes.Status500InternalServerError);
        }

        [HttpGet("get-by-id/{id}")]
        public async Task<ActionResult<BaseResponse<{{EntityName}}>>> GetById(int id)
        {
            var result = await _{{entityName}}Service.GetById(id);

            if (result.Success)
            {
                return Ok(result);
            }
            else if (result.Errors.Count > 0)
            {
                return BadRequest(result);
            }

            return StatusCode(StatusCodes.Status500InternalServerError);
        }

        [HttpPut("update/{id}")]
        public async Task<ActionResult<DefaultResponse>> Update(int id, [FromBody] {{EntityName}}Request updateRequest)
        {
            var result = await _{{entityName}}Service.Update(id, updateRequest);

            if (result.Success)
            {
                return NoContent();
            }
            else if (result.Errors.Count > 0)
            {
                return BadRequest(result);
            }

            return StatusCode(StatusCodes.Status500InternalServerError);
        }

        [HttpDelete("delete/{id}")]
        public async Task<ActionResult<BaseResponse<bool>>> Delete(int id)
        {
            var result = await _{{entityName}}Service.Delete(id);

            if (result.Success)
            {
                return NoContent();
            }
            else if (result.Errors.Count > 0)
            {
                return BadRequest(result);
            }

            return StatusCode(StatusCodes.Status500InternalServerError);
        }
    }
}